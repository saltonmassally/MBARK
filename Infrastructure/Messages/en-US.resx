<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="NotApplicable" xml:space="preserve">
    <value>NotApplicable</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="GeneralMbarkException" xml:space="preserve">
    <value>General MBARK Exception</value>
  </data>
  <data name="GeneralUnreachableCodeException" xml:space="preserve">
    <value>Code has been called that logically, should be impossible to call.</value>
  </data>
  <data name="GeneralTrespassingException" xml:space="preserve">
    <value>Code has been called that logically is possible to call, but should never be called.</value>
  </data>
  <data name="GeneralNoSuchFieldException" xml:space="preserve">
    <value>No such field.</value>
  </data>
  <data name="SpecificNoSuchFieldException" xml:space="preserve">
    <value>Field '{0}' does not exist.</value>
    <comment>fieldName</comment>
  </data>
  <data name="EmptyMessagesGroupLabel" xml:space="preserve">
    <value>Messages (none)</value>
  </data>
  <data name="NonemptyMessagesGroupLabel" xml:space="preserve">
    <value>Messages ({0})</value>
    <comment>count; Integer</comment>
  </data>
  <data name="EnumerationDelimiter" xml:space="preserve">
    <value>. </value>
  </data>
  <data name="BadDateRangeDescription" xml:space="preserve">
    <value>{0} should be between {1} and {2}, but is {3}.</value>
    <comment>fieldName, startDate, endDate, badDate; String, DateTime, DateTime, DateTime</comment>
  </data>
  <data name="GeneralMissingSpecializationException" xml:space="preserve">
    <value>Object is missing a custom specialization of a method meant to be overloaded.</value>
  </data>
  <data name="GeneralMissingWiringException" xml:space="preserve">
    <value>Object is missing a required wiring.</value>
  </data>
  <data name="MissingRequiredField" xml:space="preserve">
    <value>Missing required field '{0}'.</value>
    <comment>fieldName</comment>
  </data>
  <data name="CreateAndSelectRecord" xml:space="preserve">
    <value>Try to create, then select this record.</value>
  </data>
  <data name="Revert" xml:space="preserve">
    <value>Revert</value>
  </data>
  <data name="LowercaseNothing" xml:space="preserve">
    <value>nothing</value>
  </data>
  <data name="SingleQuote" xml:space="preserve">
    <value>'</value>
  </data>
  <data name="SpecificMissingWiringException" xml:space="preserve">
    <value>Object of type '{0}' is missing a call to wiring method '{1}'.</value>
    <comment>typeName, methodName; Type, String</comment>
  </data>
  <data name="CouldNotPopulateFieldEntryList" xml:space="preserve">
    <value>Can't populate field list.</value>
  </data>
  <data name="DatabaseError" xml:space="preserve">
    <value>Database Error</value>
  </data>
  <data name="Space" xml:space="preserve">
    <value />
  </data>
  <data name="GeneralBadSpecializationException" xml:space="preserve">
    <value>Code has been called that may be appropriate for a base class, or other sibling classes, but not this class.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SpecificMissingSpecializationException" xml:space="preserve">
    <value>Child of class '{0}' is missing specialization of method '{1}'.</value>
    <comment>baseType, methodName; Type, String</comment>
  </data>
  <data name="AutoHeightString" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="AutoWidthUpperChar" xml:space="preserve">
    <value>X</value>
  </data>
  <data name="GeneralEntityNotInCollectionException" xml:space="preserve">
    <value>Entity not in collection.</value>
  </data>
  <data name="Star" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="Ellipsis" xml:space="preserve">
    <value>...</value>
  </data>
  <data name="NumberAbbreviated" xml:space="preserve">
    <value>Num.</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="Failures" xml:space="preserve">
    <value>Failures</value>
  </data>
  <data name="GeneralControlIsNotAutosizableException" xml:space="preserve">
    <value>Control is not autosizable.</value>
  </data>
  <data name="SpecificControlIsNotAutosizableException" xml:space="preserve">
    <value>Control '{0}' is not autosizable.</value>
    <comment>controlName</comment>
  </data>
  <data name="GeneralControlHasNoSupportForSoughtInterfaceException" xml:space="preserve">
    <value>Control does not support sought interface.</value>
  </data>
  <data name="SpecificControlHasNoSupportForSoughtInterfaceException" xml:space="preserve">
    <value>Control '{0}' does not support interface '{1}'.</value>
    <comment>controlName, interfaceName</comment>
  </data>
  <data name="GeneralUnexpectedNumberOfInterfaceSupportersException" xml:space="preserve">
    <value>Found an unexpected number of interface supporters.</value>
  </data>
  <data name="SpecificUnexpectedNumberOfInterfaceSupportersException" xml:space="preserve">
    <value>Found {1} interface supporters of interface '{0}' where {2} was/were expected.</value>
    <comment>interfaceName, foundCount, expectedCount; String, Integer, Integer</comment>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="LowercaseNone" xml:space="preserve">
    <value>none</value>
  </data>
  <data name="AutoWidthLowerChar" xml:space="preserve">
    <value>x</value>
  </data>
  <data name="GeneralTooManyCallsException" xml:space="preserve">
    <value>Method or function called too many times</value>
  </data>
  <data name="SpecificTooManyCallsException" xml:space="preserve">
    <value>Method '{0}' called too many times (limit {1})</value>
    <comment>methodName, limit; String, Integer</comment>
  </data>
  <data name="UppercaseAlphabet" xml:space="preserve">
    <value>ABCDEFGHIJKLMNOPQRSTUVWXYZ</value>
  </data>
  <data name="January" xml:space="preserve">
    <value>January</value>
  </data>
  <data name="February" xml:space="preserve">
    <value>February</value>
  </data>
  <data name="March" xml:space="preserve">
    <value>March</value>
  </data>
  <data name="April" xml:space="preserve">
    <value>April</value>
  </data>
  <data name="May" xml:space="preserve">
    <value>May</value>
  </data>
  <data name="June" xml:space="preserve">
    <value>June</value>
  </data>
  <data name="July" xml:space="preserve">
    <value>July</value>
  </data>
  <data name="August" xml:space="preserve">
    <value>August</value>
  </data>
  <data name="September" xml:space="preserve">
    <value>September</value>
  </data>
  <data name="October" xml:space="preserve">
    <value>October</value>
  </data>
  <data name="November" xml:space="preserve">
    <value>November</value>
  </data>
  <data name="December" xml:space="preserve">
    <value>December</value>
  </data>
  <data name="GeneralNotFormInvokableException" xml:space="preserve">
    <value>Threads with an expiration time are not invokable by the Windows Form thread.</value>
  </data>
  <data name="DataTooShortNBytesExpected" xml:space="preserve">
    <value>Data too short ({0} bytes expected).</value>
    <comment>expectedBytes; Integer</comment>
  </data>
  <data name="AutosizableDropDownGroupCannotLayoutItself" xml:space="preserve">
    <value>AutosizableDropDownGroup cannot layout itself.</value>
  </data>
  <data name="RationalDelimiter" xml:space="preserve">
    <value>/</value>
  </data>
  <data name="OpenDoubleQuote" xml:space="preserve">
    <value>"</value>
  </data>
  <data name="CloseDoubleQuote" xml:space="preserve">
    <value>"</value>
  </data>
  <data name="OpenParenthesis" xml:space="preserve">
    <value>(</value>
  </data>
  <data name="CloseParenthesis" xml:space="preserve">
    <value>)</value>
  </data>
  <data name="Colon" xml:space="preserve">
    <value>:</value>
  </data>
  <data name="ColonSpace" xml:space="preserve">
    <value>: </value>
  </data>
  <data name="Comma" xml:space="preserve">
    <value>,</value>
  </data>
  <data name="CommaSpace" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="Hashmark" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="Attention" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="HiddenGroupRadioButtonText" xml:space="preserve">
    <value>XXX</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="ConfigurationFile" xml:space="preserve">
    <value>Configuration File</value>
  </data>
  <data name="ApplicationError" xml:space="preserve">
    <value>Application Error</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="GeneralMissingThreadInterruptedHandlerException" xml:space="preserve">
    <value>Method does not handle ThreadInteruptedException</value>
  </data>
  <data name="GeneralRedundantWiringException" xml:space="preserve">
    <value>Object already has wire.</value>
  </data>
  <data name="SpecificRedundantWiringException" xml:space="preserve">
    <value>Object of type '{0}' already has a '{1}' wire.</value>
    <comment>thisType, wireName; Type, String</comment>
  </data>
  <data name="GeneralBadProxyException" xml:space="preserve">
    <value>Name does not point to any object.</value>
  </data>
  <data name="SpecificBadProxyException" xml:space="preserve">
    <value>Name '{1}' not found in collection of type {0}.</value>
    <comment>collectionType, proxyName; Type, String</comment>
  </data>
</root>